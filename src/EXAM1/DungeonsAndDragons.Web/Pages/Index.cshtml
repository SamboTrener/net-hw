@page "{handler?}"
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <div>Create player</div>
    <form asp-page-handler="OnPost" method="post">
        <label asp-for="Player.Name">User name: </label>
        <input asp-for="Player.Name" />
        <br/>
        <label asp-for="Player.HitPoints">Hit points: </label>
        <input asp-for="Player.HitPoints"/>
        <br/>
        <label asp-for="Player.AttackModifier">Attack modifier: </label>
        <input asp-for="Player.AttackModifier" id="attack-modifier"/>
        <br/>
        <label asp-for="Player.AttackPerRound">Attacks per round: </label>
        <input asp-for="Player.AttackPerRound" id="attacks-per-round"/>
        <br/>
        <label asp-for="Player.DamageCount">Damage: </label>
        <input asp-for="Player.DamageCount" id="dmg-count"/>d<input asp-for="Player.DamageMax" id="dmg-max"/>
        <br/>
        <label asp-for="Player.DamageModifier">Damage modifier: </label>
        <input asp-for="Player.DamageModifier" id="dmg-modifier"/>
        <br/>
        <label asp-for="Player.Weapon">Weapon: </label>
        <input asp-for="Player.Weapon" id="weapon" />
        <br/>
        <label asp-for="Player.ArmorClass">Armor class: </label>
        <input asp-for="Player.ArmorClass"/>
        <br/>
        <label>Min AC to Always hit: </label>
        <input readonly="readonly" id="min-ac"/>
        <br/>
        <label>Damage: </label>
        <span><span id="dmg-from"></span> - <span id="dmg-to"></span></span>
        <br/>
        <div asp-validation-summary="All"></div>
        <button class="btn btn-primary" type="submit" disabled="@(!( Model.FightResults is null || Model.FightResults.UserEndStatus?.HitPoints > 0 ))"> Fight</button>
    </form>
</div>
@{
    var enemy = Model.Enemy;
    var results = Model.FightResults;
    var player = Model.Player;
}
@if(Model.FightResults is not null && Model.Enemy is not null)
{
    <div>
        <div>
            <p>Enemy:</p>
            @enemy.FormatEntityHtmlToList()
            <p>You</p>
            @player.FormatEntityHtmlToList()
        </div>
        <div>
            <p>Fight log</p>
            <div>
                @foreach (var round in results.Logs.OrderBy(l => l.RoundNumber).ToList())
                {
                    <p class="fw-bold">Round @round.RoundNumber</p>
                    <div>
                        <p>@player.Name</p>
                        <p class="text-info">@round.PlayerStatus</p>
                        <p>@enemy.Name</p>
                        <p class="text-info">@round.MonsterStatus</p>
                    </div>
                }
            </div>
        </div>
    </div>
}

@section Scripts
{
    <script type="application/javascript">
        const dmgCount = $('#dmg-count');
        const dmgMax = $('#dmg-max');
        const attackModifier = $('#attack-modifier');
        const weapon = $('#weapon');
        const minAc = $('#min-ac');
        const dmgFrom = $('#dmg-from');
        const dmgTo = $('#dmg-to');
        const dmgModifier = $('#dmg-modifier');
        const attacksPerRound = $("#attacks-per-round");
        
        [dmgCount, dmgMax, attackModifier, weapon, dmgModifier, attacksPerRound].forEach(t => t.on('input', e => updateDmgRange()));
        
        function updateDmgRange()
        {
            let minAcValue = Number(attackModifier.val()) + Number(weapon.val()) + 1;
            let dmgFromValue = (Number(dmgCount.val()) + Number(weapon.val()) + Number(dmgModifier.val())) * Number(attacksPerRound.val());
            let dmgToValue = (Number(dmgMax.val()) * Number(dmgCount.val()) + Number(weapon.val()) + Number(dmgModifier.val())) * Number(attacksPerRound.val());
            minAc.val(minAcValue);
            dmgFrom.text(dmgFromValue);
            dmgTo.text(dmgToValue);
        }
        
        updateDmgRange();
    </script>
}
